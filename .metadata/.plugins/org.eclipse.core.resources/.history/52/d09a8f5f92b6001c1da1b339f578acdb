package com.tintucgiaothong.data.domain;


import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Blob;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

import javax.imageio.ImageIO;
import javax.persistence.AttributeConverter;
import javax.persistence.CascadeType;
import javax.persistence.Convert;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.sql.rowset.serial.SerialBlob;

import org.apache.commons.codec.binary.Base64;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Entity
@Data
@AllArgsConstructor
@NoArgsConstructor
@Table(name = "noidung")
@Slf4j
public class NoiDung {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private long id;
	private String content;
	@Convert(converter = String_to_Byte.class)
	private String image;
	private LocalDateTime creation_time;
	@ManyToOne
	@JoinColumn(name = "id_nguoidung",referencedColumnName = "id")
	private NguoiDung nguoiDung;
	@OneToMany(mappedBy = "noiDung")
	private List<ChuDe> chuDes=new ArrayList<>();
	
	
	
	static class String_to_Byte implements AttributeConverter<String, Blob>{

		@Override
		public Blob convertToDatabaseColumn(String attribute) {
			File file=new File(attribute);
			  try {
				  BufferedImage bImage = ImageIO.read(file);
			      ByteArrayOutputStream bos = new ByteArrayOutputStream();
			      ImageIO.write(bImage, "jpg", bos );
			      byte[] data = bos.toByteArray();
			      Blob blob=new SerialBlob(data);
			      return blob;
			  }catch(IOException e) {
				  log.info(e.getMessage());
			  }catch(SQLException e) {
				  log.info(e.getMessage());
			  }
			
			return null;
		}

		@Override
		public String convertToEntityAttribute(Blob dbData) {
			try {
				InputStream inputStream= dbData.getBinaryStream();
				String chuoi=Base64.encodeBase64String(inputStream.readAllBytes());
				return chuoi;
			}catch(Exception e) {
				 log.info(e.getMessage());
			}
			return null;
		}
		
	}
}
